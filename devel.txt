Ant-ropy with html5/css/javascript/jquery
=========================================
2014. 09. 10.
- First version in git.
- Separate js file with some dummy function.
- Making ant-ropy19 work:
  - Downloading repast3.0
  - Creating a start.sh script to strt the program. 

2014. 09. 14.
- Starting Food class.
- Random placement of one food.
- Gaussian random. (http://stackoverflow.com/a/20161247/21047)
- Several food around a food source.

2014. 09. 17.
- Foods class for static methods of java Food.

2014. 09. 20.
- Food is filled circle instead of rectangle.
- Hive is filled circle instead of rectangle.
- use strict
- Ants and Ant "classes".

2014. 09. 23.
- Ants heading. Calculated with random. Using neighbours array to draw.

2014. 09. 24.
- First timing attempt.
- Ants move, screen is redrawn.

2014. 09. 27.
- Fixing ant step and draw.
- Random walk with bias to the current direction.

2014. 10. 01.
- Object-level init functions are eliminated.
- Measuring running speed of step.
- Optimizing execution with stroke and stroke/fillStyle
repositioning: almost 2x faster - 25 msec - for 1000 ants and 100 foods.
- Offscreen drawing: it does not give any advance: 27 msec. I live it
in the code to have an example off screen drawing.

2014. 10. 02.
- Starting Pheromone class. Repast.Diffuse2D's API is here: https://supportweb.cs.bham.ac.uk/documentation/java/repast/api/uchicago/src/sim/space/Diffuse2D.html

2014. 10. 05.
- Fixing line end marker. CR/LF is saved for line end under windows. (Previous saves were OK.)
git shows changes for all lines. emacs CR/LF -> LF : C-x RET f unix (file encoding change)
- Some pheromone functions have been started.

2014. 10. 10.
- Pheromone write/read matrices with random colors are used on 1/4 of the screen for test.
- Moving auxiliary functions to aux.js.
- Moving Pheromone functions to pheromone.js.
- Moving Ant, Ants functions to ant.js.
- Moving Food, Foods functions to food.js.

2014. 10. 15.
- aux.js has been renamed to helper.js as Windows does not allow filenames with any extension and named as aux.
- Using AntSpace with abstract space size. Conversion between space and canvas coordinates.
- AntSpace.center and AntSpace.crop2Space to hide all canvas specific measure. 

2014. 10. 16.
- Ants emit pheromone (just a constant).
- Emitted pheromone is drawn.

2014. 10. 17.
- Deleting AntSpace.num2Canvas: drawn objects are more sprite-like
they size does not necessarily match space cell size.
- Better color number conversion with helper.decimalToHexString.
- Better color calculation.

2014. 10. 19.
- Color calculation fixed.
- Pheromone is cellsize drawn and correctly positioned on the grid crossing.
- Pheromone is on a new canvas layer.

2014. 10. 20.
- Maybe Ants class is unnecessary and everything can be solved with
static tags of Ant?
- Diffusion: nothing visible (TODO check), slows down to 120 ms.

2014. 10. 22.
- Diffusion constant was 0.86 and evaporation rate was 0.01 during
Repast simulations.
- Diffusion calculation was based on Diffuse2D, a class in
Repast. However the code of computeVal was rewritten and resides in
the own source trunk.
- Pheromone.step = { diffuse();, calculate(); /*(ant pheromone)*/, update(); } is
the correct order, it was used in Repast as well. 

2014. 10. 31.
- Using correct diff and evap constants.
- Calculation is based on own Diffuse2D.
- Fix: using rgb for fillstyle instead of '#' prefixed hexadecimal numbers.

2014. 11. 02.
- getEmittedPheromone -> getEmittedPheromoneHive
- getEmittedPheromoneHive is a decreasing function and takes Hive into account.
- Using get/set in Ant and Food for position.
- Code cleanup.
- Introduction of pheromoneFood (unfortunate code duplication in pheromone.js).

2014. 11. 05.
- Hive in a separate hive.js.
- Every js script has use strict at the beginning.
- Main init and step are embedded in a new Antropy object.
- Antropy-related global variables became the member of Antropy object.
- All AntSpace functions became static. 
